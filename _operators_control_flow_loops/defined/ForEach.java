package _operators_control_flow_loops.defined;

/* Усовершенствованный цикл for */

/*ДЛЯ:
 * - перебор неупорядоченного массива
 * - вычисление среднего значения
 * - поиск минимального и максимального значения в множестве
 * - поиск дубликатов
 * - работы с Collections Framework
 * - и т.д.*/

import java.util.ArrayList;

public class ForEach {
    public static void main(String[] args) {
        System.out.println("\"ForEach\"");

        /*ОБЫЧНОЕ ПРИМЕНЕНИЕ
         * - for (переменная : коллекция) оператор
         * - тип переменной цикла должен быть совместимым с типом коллекции
         * - переменная цикла перебирает элементы коллекции (а не значения индекса)
         * - в отличие от for нельзя:
         *   + обработать часть коллекции (но можно оборвать при помощи break)
         *   + использовать счетчик явно в цикле
         *   + переменная коллекции доступна только для чтения*/
        ArrayList<Integer> list = new ArrayList<>();
        list.add(51);
        list.add(136);
        list.add(111);
        list.add(387);
        for (Integer i : list) {
            System.out.println("Настоящая i: " + i);
            if (i == 111) { // единственный способ выйти из лупа раньше конца
                System.out.println("Выйду из лупа на 111");
                break;
            }
            i = 3424; // Доступна только для чтения - изменения сотрутся в конце цикла!!!
            System.out.println("Временная попытка переписать i: " + i);
        }


        /*ВЛОЖЕННЫЙ
         * - итерационная переменная должна быть ссылкой на одномерный массив, например типа int*/
        int[][] nums = new int[3][];
        nums[0] = new int[]{1, 2, 3};
        nums[1] = new int[]{3, 4, 5};
        nums[2] = new int[]{6, 7, 8, 9, 10};
        for (int[] i : nums) { // Проход по первому уровню из одномерных массивов
            for (int y : i) { // Проход по второму уровню из чисел
                System.out.println(y);
            }
        }
    }
}
