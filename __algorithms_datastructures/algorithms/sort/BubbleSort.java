package __algorithms_datastructures.algorithms.sort;

/* Bubble Sort
 * - ключевая идея: если сравнивать элемент с соседним, и так до конца массива, то наибольший элемент
 * всегда выплывает в конец и может считаться сортированным
 *      - и так все, что всплывает в конец после каждой итерации, может считаться сортированным, а
 *      несортированных элементов остается все меньше
 *
 * - алгоритм:
 *      - за каждый проход по массиву неотсортированные элементы последовательно сравниваются попарно
 *          - если порядок неверный, производится обмен
 *      - проходы повторяются n-1 раз или пока все не отсортируется
 *          - т.к. за каждый проход самый большой неотсортированный элемент переместится в конец
 *          диапазона, то диапазон можно каждый раз сокращать с конца на 1
 *
 * - редко используется на практике, т.к. эффективен только для небольших массивов
 *
 * - in-place
 *
 * - сложность:
 *      - лучшая: O(n)
 *      - средняя: O(n^2)
 *      - худшая: O(n^2) */


import java.util.Arrays;

public class BubbleSort {

    public static void main(String[] args) {
        int[] a = {1, 4, 6, 2, 10, 3};
        sort(a);
        System.out.println("BubbleSort" + Arrays.toString(a));
    }

    private static void sort(int[] a) {
        //проходов на 1 меньше элементов
        for (int i = 0; i < a.length - 1; i++) {
            // сравниваем пары, начиная с
            for (int j = 0; j < a.length - 1 - i; j++) {
                if (a[j] > a[j + 1]) {
                    int t = a[j + 1];
                    a[j + 1] = a[j];
                    a[j] = t;
                }
            }
        }
    }
}