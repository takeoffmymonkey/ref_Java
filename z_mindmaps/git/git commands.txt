git help: список команд
git config --global user.name "John Doe": пример изменения настроек
cat .git/config - конфигурационный файл текущего репозитория (там, напр., есть список удаленных репозиториев)
cat .git/HEAD: узнать, где сейчас HEAD
cat .git/refs/heads/master: узнать, где мастер
git config --global alias.st "status": назначить алиас для комманды (co = checkout, ci = commit,
br = branch, logg = log --graph --decorate --oneline --abbrev-commit --all)
git init: инициализация отслеживания папки (удалить отслеживание - просто удалить .git)
git log: список коммитов
git log -n 3: список последних 3 коммитов
git log --since=2017-08-12: начиная с даты
git log --until=2017-08-12: по дату
git log --author="takeoff": по автору
git log --grep="fix": поиск по заданному тексту
git log --graph: графическое представление истории
git log --oneline --graph --all --decorate: то же, но компактнее + плюс где HEAD и мастер
git show [commit]: детальная инфа по коммиту
git diff [commit] [file]: показать чем отличается текущий файл, от его в коммите
git diff [commit] [commit]: показать чем отличается 1 коммит от другого
git diff [branch]..[branch]: сравнить 2 ветки
git diff: сравнить файл в репозитории с тем, что в рабочей директории
git diff --staged: сравнить файл в репозитории с тем, что в индексе
git diff --name-status master..branchName: список файлов с различиями между ветками
git status: различия между рабочей директорией, индексом и репозиторием
git add .: добавить все изменения из рабочей директории в индекс/добавить отслеживание 
git commit -m "comment": запись скриншота в историю версий (репозиторий)
git commit --amend: изменить последний коммит на тот, что в индексе
git rm: удалить файл из рабочей директории и подготовить удаление через индекс
git rm --cashed: удалить файл из индекса, но оставить в рабочей директории
git rm --cached [file]: перестать отслеживать файл (также нужно добавить в .gitignore)
git mv [file-original] [file-renamed]: переименовать
git checkout [branch]: переключиться на указанную ветку и проапдейтить рабочую директорию
git checkout -- [file]: остаться в текущей ветке и проапдейтить рабочую директорию файлом из
репозитория
git checkout [commit] -- [file]: остаться в текущей ветке и проапдейтить рабочую директорию
файлом из репозитория
git checkout -b [name]: создать новую ветку и переключиться на нее
git reset [file]: убрать изменения из индекса
git reset [commit]: отменить все коммиты после указанного, сохранив изменения локально
git revert [commit] - отменить коммит
git clean: удалить не отслеживаемые файлы из рабочей директории
git branch: список веток проекта
git branch [name]: создать новую ветку
git branch -m [new name]: переименовать ветку
git branch -d [name]: удалить ветку (сначала выйти из нее) - если есть разница, предложит слиться. Чтоб не спрашивал -D
git branch -a: показать все ветки с учетом удаленных
git merge [branch]: сливает указанную ветку в текущую
git merge --abort: прервать состояние слияния (когда есть конфликты, но перехотелось их сейчас
решать)
git merge -no-ff [branch]: при возможности быстрого слияния, создать новый коммит (а не
использовать текущий)
git remote - список известных удаленных репозиториев
git remote -v - чуть развернутей список удаленных репозиториев
git remote add [alias] [url]: - добавить удаленный сервер по ссылке и по указанному имени
git remote rm [alias] - удалить удаленный репозиторий (локально)
git push -u [alias] [branch] - отправить на указанный удаленный репозиторий указанную ветку. -u: указанная локальная ветка будет отслеживать данную ветку на указанном удаленном репозитории
git pull origin branchname --allow-unrelated-histories: убрать ошибку fatal: refusing to merge
unrelated histories, когда в первый раз стягиваешь remote в локальный репозиторий
git clone [url] [local repository]: сделать локальную копию из существующего удаленного репозитория
git push: отправляет изменения на отслеживаемую ветку
git push origin --delete [branch]: удалить ветку на удаленном сервере
git stash: поместить грязные файлы в рабочей директории и индексе в стеш
git stash save "comment": сохранить в стеш
git stash list: список того, что в стеше
git stash apply --index: вернуть последний снимок из стеша, в том числе с индексом
git apply stash@{2}: вернуть второй снимок
git stash drop: удалить снимок из стеша
git stash pop: достать из стеша и удалить его оттуда
git stash show -p | git apply -R: когда внесенные изменения не устроили и надо сделать "unapply"
git stash branch [newbranch]: создание новой ветки, где первым коммитом будет тот, для которого
был сделан стеш, восстановление спрятонного из стеша и, при успешном восстановлении, удалении
стеша 