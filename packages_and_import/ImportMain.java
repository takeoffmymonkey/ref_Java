/*УТОЧНЕННОЕ ИМЯ
 * - имя пакета + полное имя типа*/

package packages_and_import;

/*КОМПИЛЯТОР АВТОМАТИЧЕСКИ ИМПОРТИРУЕТ:
 *	- java.lang
 *	- пакет текущего файла */

//import packages_and_import.ImportMain; // автоматически импортирован

// import java.lang.System; // автоматически импортирован


/*ЧТОБЫ ОБРАТИТСЯ К ТИПУ СНАРУЖИ ПАКЕТА, НУЖНО 1 ИЗ:
 * 	- сослаться на него по полностью уточненному имени
 * 	    - если сослаться нужно 1 раз
 * 	    - т.е. import не обязателен
 * 	    - усложняет чтение
 *
 * 	- импортировать его:
 * 	    - если нужно всего несколько членов из пакета
 * 	    - import + уточненное имя
 *
 * 	- импортировать весь его пакет
 * 	    - если нужны все члены пакета
 * 	    - import имяпакета.*
 * 	        - * это все классы внутри пакета, нельзя написать:
 * 	            import graphics.A*;
 * 	    - не влияет на объем кода*/

import types_references_annotations.my_annotations.Ntrstn; // импорт члена

//import packages_and_import.other_package.*; // импорт всего пакета


/*КОНФЛИКТ ИМЕН
 * - появляется при импорте типа:
 *      - если в текущем пакете есть тип с таким же именем:
 *          - импортированный будет заменять тот, что есть в текущем пакете
 *      - если в текущий пакет уже импортирован тип таким же именем, как у импортированного:
 *          - ошибка компилятора - нужно к каждому обращаться по уточненному имени */

/*ПРИМЕР: В ЭТИХ ПАКЕТАХ ЕСТЬ СВОЙ КЛАСС PackageMain*/
import packages_and_import.illusion_of_hierarchy.PackageMain;
// import packages_and_import.other_package.PackageMain; // ошибка компилятора - импорт уже есть


/*СТАТИЧЕСКИЙ ИМПОРТ
 * - можно импортировать статические члены классов или инт-сов, чтобы постоянно их не указывать
 * - после import указать static и уточненное имя статического члена
 * - дальше можно использовать их без уточнения
 * - слишком частое использование может усложнить чтение и поддержку кода:
 *      - конфликт имен
 *      - сокрытие*/
/*ИМПОРТ СТАТИЧЕСКИХ ЧЛЕНОВ ПО ОДНОМУ*/
/*ИМПОРТ ВСЕХ СТАТИЧЕСКИХ ЧЛЕНОВ В КЛАССЕ*/
import static java.lang.Math.*;


@Ntrstn("компилятор автоматически импортирует пакет текущего файла")
@Ntrstn("import не обязателен, т.к. можно сослаться полностью по имени типа")
@Ntrstn("импорт всего пакета не влияет на объем кода")
class ImportMain {
    int var;
    static int staticVar;

    public static void main(String[] args) {
        /*УТОЧНЕННОЕ ИМЯ + ИМПОРТ ЧЛЕНА*/
        packages_and_import.illusion_of_hierarchy.InnerMain innerMain =
                new packages_and_import.illusion_of_hierarchy.InnerMain(); // уточненное имя


        /*АВТОМАТИЧЕСКИЙ ИМПОРТ*/
        staticVar = 5; // данный класс импортирован автоматически
        System.out.println(); // классы java.lang.*, напр. System, импортированы автоматически


        /*КОНФЛИКТ ИМЕН*/
        PackageMain packageMain = new PackageMain(); // импортный тип замещает существующий,
        // т.е. это packages_and_import.illusion_of_hierarchy.PackageMain,
        // а не packages_and_import.PackageMain


        /*СТАТИЧЕСКИЙ ИМПОРТ*/
        int i = staticVar; // используется без уточнения
        double pi = PI; // используется без уточнения
        double rand = random(); // используется без уточнения
    }
}