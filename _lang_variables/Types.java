

package _lang_variables;

public class Types {
    /*ПЕРЕМЕННАЯ РЕАЛИЗАЦИИ (ЭКЗЕМПЛЯРА)
     * - поле данных в декларации класса (не статическое)
     * - объявляются в классе, но за пределами метода, конструктора или какого-либо блока
     * - создается и получает дефолтное значение при создании экземпляра данного класса или потомка
     * (команда new)
     * - уничтожается с экземпляром при сборке мусора (после финализации)
     * - когда для объекта в стеке выделяется пространство, создается слот для каждого значения
     * переменной экземпляра
     * - являются видимыми для всех методов, конструкторов и блоков в классе
     * - значения могут быть присвоены при объявлении или в конструкторе*/
    int instanceVar;
    int instanceVar2 = 2;


    /* (СТАТИЧЕСКАЯ) ПЕРЕМЕННАЯ КЛАССА
     * - статическое поле данных в декларации класса или интерфейса
     * - создается при загрузке класса или интерфейса
     * - после создания сразу присваивается значение по умолчанию
     * - уничтожается, когда класс или интерфейс выгружаются (после завершения финализации)
     * - существует только в 1 экземпляре (независимо от количества экземпляров класса)
     * - используются редко, кроме когда объявляются как константы
     * - значения могут быть присвоены при объявлении или в конструкторе. Кроме того, они могут быть
     * присвоены в специальных блоках статического инициализатора (но не для интерфейсов)*/
    static int globalVar;
    static int globalVar2;

    static {
        globalVar2 = 0; // инициализация в блоке статического инициализатора
    }

    interface example {
        int globalVar = 0;// Также статическая переменная
    }


    /*ПАРАМЕТР КОНСТРУКТОРА
     * - имена значений аргументов, передаваемых конструктору
     * - для каждого параметра в декларации конструктора создается новая переменная при явном или
     * неявном вызове конструктора
     * - присваивается значение аргумента, переданное конструктору при вызове
     * - уничтожается после завершения выполнения тела конструктора */
    public Types(int constructorParameter) {
        instanceVar = constructorParameter;
        globalVar = constructorParameter;
    }


    /*ПАРАМЕТР МЕТОДА
     * - имена значений аргументов, передаваемых методу
     * - для параметра в декларации метода создается новая переменная каждый раз при вызове метода
     * - присваивается значение аргумента
     * - уничтожается после выполнения тела метода*/
    void method(int methodParameter) {
    }


    /*ЛОКАЛЬНАЯ ПЕРЕМЕННАЯ
     * - переменная, созданная внутри блока кода или оператора for
     * - должна быть инициализирована перед использованием
     * - уничтожается после выполнения блока или оператора, в котором она была создана
     * - нельзя использовать модификаторы доступа
     * - реализуются на уровне стека внутри*/
    void method2() {
        int localVar;
        for (int localVar2 = 0; localVar2 < 1; localVar2++) {
        }
        // public int localVar; // запрещены модификаторы доступа
    }


    public static void main(String[] args) {
        /*ЭЛЕМЕНТЫ МАССИВА
         * - неименованные переменные, из которых состоит массив
         * - создаются и получают дефолтное значение при создании массива
         * - уничтожаются во время сборки мусора*/
        int[] w = new int[10];


        /*ПАРАМЕТР ОБРАБОТЧИКА ИСКЛЮЧЕНИЙ
         * - создается при выполнении catch оператора try
         * - значением становится объект, ассоциированный с возникшим исключением
         * - уничтожается после выполнения блока catch*/
        try {
        } catch (Exception exceptionParameter) {
        }
    }
}