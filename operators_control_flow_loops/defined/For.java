package operators_control_flow_loops.defined;

/* - выполнять операцию пока условие справедливо
 *
 * - является сокращенным и более удобным вариантом while*/

public class For {
    public static void main(String[] args) {
        System.out.println("\"For\"");

        /*ОБЫЧНОЕ ИСПОЛЬЗОВАНИЕ
         * - принято: for (инициализация счетчика; условие выполнения тела цикла; порядок обновления
         * счетчика)
         * - инициализация счетчика происходит единожды
         * - переменная счетчика видна только внутри цикла (может потребоваться объявить снаружи)*/
        int c = 0; // видна снаружи и внутри цикла
        for (int i = 0; i < 5; i++) {
            // i видна только внутри цикла
            System.out.println("Обычный цикл в 5 итераций");
        }


        /*УПРАВЛЕНИЕ ЦИКЛОМ НЕСКОЛЬКИМИ ПЕРЕМЕННЫМИ*/
        for (int a = 1, b = 5; a < b && true; a++, b--, c++) { // даже с можно итерировать
            System.out.println("Цикл с несколькими переменными");
        }


        /*БЕСКОНЕЧНЫЙ ЦИКЛ
         * - никакой элемент не является обязательным*/
        for (; ; ) {
            System.out.println("В бесконечном цикле");
            break;
        }


        /*ЕЩЕ ВАРИАНТ ИТЕРАЦИИ; ПОХОЖ НА WHILE*/
        int d = 0;
        boolean done = false;
        for (; !done; ) {
            System.out.println("В цикле, похожем на while");
            if (d == 4) done = true;
            d++;
        }


        /*АККУРАТНО С double
         * не завершится из-за ошибок округления: после 9.999999999999998 будет 10.099999999999998,
         * так как 0.1 не существует в двоичном представлении*/
        for (double x = 0; x != 10; x += 0.1) {
            System.out.println(x);
            System.out.println("Цикл с double не завершится");
            if (x > 11) break;
        }
    }
}
