package types_references_classes;

import types_references_annotations.my_annotations.Ntrstn;


/* ВНУТРИ МЕТОДА ИЛИ КОНСТРУКТОРА ДЛЯ ССЫЛКИ НА ТЕКУЩИЙ ОБЪЕКТ
 * - является нестатической ссылочной переменной:
 *      - можно использовать везде, где разрешается ссылаться на объект текущего класса
 *      - нельзя использовать в статическом контексте
 *
 * - напр. чтобы избежать затемнения:
 *      - поля с аналогичным именем
 *      - метода с аналогичным именем в подклассе
 *          - т.к. подкласс имеет доступ ко всем членам обрамляющего класса
 *          - и не существует без объекта обрамляющего класса*/


/* ВНУТРИ КОНСТРУКТОРА ДЛЯ ВЫЗОВА ДРУГОГО КОНСТРУКТОРА
 * - для вызова другого конструктора данного класса
 * - сокращает количество кода
 * - должен быть со скобками () и параметрами нужного конструктора
 * - должен идти первым
 * - нельзя использовать переменную экземпляра
 * - нельзя использовать вместе с super()
 * - медленней, чем конструктор с полным кодом
 *      - но чтоб ощутить замедление, нужно создавать тысячи объектов*/


@Ntrstn("this используется в 2 разных целях: 1 - внутри метода или конструктора, чтобы ссылаться на " +
        "текущий объект; 2 - внутри конструктора для вызова другого конструктора данного класса.")

@Ntrstn("Использование this внутри метода или конструктора, чтобы ссылаться на текущий объект: в " +
        "таком контексте this является нестатической ссылочной переменной - ее можно использовать " +
        "везде, где уместна ссылка на текущий объект (напр. можно присвоить текуший объект другой " +
        "ссылке) и нельзя использовать в статическом контексте. Часто используется с целью избежать " +
        "затемнения поля или метода (в случае затемнения в подклассе, т.к. подкласс имеет прямой " +
        "доступ к членам обрамляющего класса).")

@Ntrstn("Использование внутри конструктора для вызова другого конструктора данного класса: должен " +
        "идти первым в теле конструктора. После this должны идти скобки. В скобках указываются " +
        "параметры нужного конструктора. В качестве параметра не должно быть нестатическое поле " +
        "класса, т.к. оно еще не создано к этому моменту. Является взаимоисключающим с super() - " +
        "либо то, либо то. Помогает сократить количество кода в конструкторе, но может замедлить " +
        "программу, если создавать тысячи объектов")


public class This {
    int field;


    /*ИСПОЛЬЗОВАНИЕ В КОНСТРУКТОРЕ ДЛЯ ВЫЗОВА ДРУГОГО КОНСТРУКТОРА*/
    public This() {
        this(5); // должен идти первым
//        super(); // нельзя использовать с this (первый вызов уже занят)
//        this(field);// нельзя использовать переменную экземпляра
    }


    /*ИСПОЛЬЗОВАНИЕ В КОНСТРУКТОРЕ ДЛЯ ССЫЛКИ НА ТЕКУЩИЙ ОБЪЕКТ*/
    /* ИСПОЛЬЗОВАНИЕ В КАЧЕСТВЕ ССЫЛКИ */
    public This(int field) {
        this.field = field; // параметр field затемняет поле field
        Object o = this; //можно назначить подходящему объекту
    }


    /*ИСПОЛЬЗОВАНИЕ В МЕТОДЕ ДЛЯ ССЫЛКИ НА ТЕКУЩИЙ ОБЪЕКТ*/
    void meth(int field) {
        this.field = field; // параметр field затемняет поле field
    }

    /*ИСПОЛЬЗОВАНИЕ В МЕТОДЕ ДЛЯ ССЫЛКИ НА ТЕКУЩИЙ ОБЪЕКТ - ВО ВНУТРЕННЕМ КЛАССЕ*/
    class Inner {
        void meth() {
            This.this.meth(4);
        }
    }
}