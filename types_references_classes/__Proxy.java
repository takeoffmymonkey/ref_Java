package types_references_classes;

//TODO: закончить

/*- требуются, если на стадии компиляции еще неизвестно, какие именно интерфейсы следует реализовать (в прикладном программировании такая ситуация возникает крайне редко)

- полезны для создания инструментальных средств системного программирования

- во время выполнения создают новые классы, реализующие заданные инт-сы

- содержат следующие методы:
	+ все методы, которые требуют указанные интерфейсы

	+ все методы, определенные в классе Object (в том числе toString(), equals() и т.д.)


- для создания прокси-объекта служит метод newProxyInstance() из класса __Proxy. Получает 3 параметра:
	+ загрузчик классов. Модель безопасности в Java позволяет использовать загрузчики разных классов, в том числе системных классов, загружаемых из Интернета, и т.д. null - использовать загрузчик классов, предусмотренный по умолчанию

	+ массив объектов типа Class — по одному на каждый реализуемый интерфейс

	+ обработчик вызовов


- все прокси-классы расширяют класс __Proxy

- во всех прокси-классах переопределяются методы toString(), equals(), hashCode() из класса Object. Эти методы лишь вызывают метод invoke() для обработчика вызовов.

- другие методы из класса Object (напр., clone() и getClass()) не переопределяются.

- имена прокси-классов не определены. В JVM формируются имена классов, начинающиеся со строки $ __Proxy.

- для конкретного загрузчика классов и заданного набора инт-сов может существовать только 1 прокси-класс

- всегда является открытым (public) и конечным (final)

- если все инт-сы, которые реализуются прокси-классом, объявлены как public, этот класс не принадлежит ни одному конкретному пакету. В противном случае все инт-сы, в объявлении которых не указан модификатор доступа public, а следовательно, и сам прокси-класс, должны принадлежать одному пакету*/


public class __Proxy {
}
