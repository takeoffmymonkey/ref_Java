package _numbers_representation;

/*
Десятичная	Двоичная	Восьмеричная	Шестнадцатеричная
------------------------------------------------------------
0	            0	            0	            0
------------------------------------------------------------
1	            1	            1	            1
------------------------------------------------------------
2	            10	            2	            2
------------------------------------------------------------
3	            11	            3	            3
------------------------------------------------------------
4	            100	            4	            4
------------------------------------------------------------
5	            101	            5	            5
------------------------------------------------------------
6	            110	            6	            6
------------------------------------------------------------
7	            111	            7	            7
------------------------------------------------------------
8	            1000	        10	            8
------------------------------------------------------------
9	            1001	        11	            9
------------------------------------------------------------
10	            1010	        12	            A
------------------------------------------------------------
11	            1011	        13	            B
------------------------------------------------------------
12	            1100	        14	            C
------------------------------------------------------------
13	            1101	        15	            D
------------------------------------------------------------
14	            1110	        16	            E
------------------------------------------------------------
15	            1111	        17	            F
------------------------------------------------------------
16	            10000	        20	            10
------------------------------------------------------------*/


/*10-РИЧНАЯ
 * - основание 10
 * - понятна программисту
 * - базисными цифрами являются от 0 до 9 включительно
 * - 10 единиц базисного разряда объединяются в единицу старшего:
 *      1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 10
 * - позиция каждого разряда - степень основания:
 *      + степень 0 в месте разделителя
 *      + направо повышается, налево уменьшается
 *      + напр. 123,45 = 1*10^2 + 2*10^1 + 3*10^0 + 4*10^-1 + 5*10^-2*/


/*2-ИЧНАЯ
 * - основание 2 (позиция каждого разряда - степень основания)
 * - используется для представления чисел в микропроцессоре
 * - базисными цифрами являются 0 и 1
 * - 2 единицы базисного разряда объединяются в единицу старшего:
 *      1 + 1 = 10
 * - позиция каждого разряда - степень основания:
 *      + степень 0 в месте разделителя
 *      + направо повышается, налево уменьшается
 *      + напр. 123,45 = 1*2^2 + 2*2^1 + 3*2^0 + 4*2^-1 + 5*2^-2*/


/*8-РИЧНАЯ
 * - основание 8 (позиция каждого разряда - степень основания)
 * - для удобства отображения 3 разрядов битов (триад): 111 (в двоичной) = 7 (в восьмиричной)
 * - базисными цифрами являются от 0 до 7 включительно
 * - 8 единиц базисного разряда объединяются в единицу старшего:
 *      1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 10
 * - позиция каждого разряда - степень основания:
 *      + степень 0 в месте разделителя
 *      + направо повышается, налево уменьшается
 *      + напр. 123,45 = 1*8^2 + 2*8^1 + 3*8^0 + 4*8^-1 + 5*8^-2*/


/*16-РИЧНАЯ
 * - основание 16 (позиция каждого разряда - степень основания)
 * - для удобства отображения 4 разрядов битов (тетрад): 1111 (в двоичной) = F (в восьмиричной)
 * - базисными цифрами являются от 0 до 9 включительно и от A до F включительно
 * - 16 единиц базисного разряда объединяются в единицу старшего:
 *      1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 10
 * - позиция каждого разряда - степень основания:
 *      + степень 0 в месте разделителя
 *      + направо повышается, налево уменьшается
 *      + напр. 123,45 = 1*16^2 + 2*16^1 + 3*16^0 + 4*16^-1 + 5*16^-2*/


/* СМЕШАННАЯ
 * - числа, заданные в системе счисления с основанием P изображаются с помощью цифр другой системы
 * счисления с основанием Q, где Q<P.
 * - тогда P называется старшим основанием, Q — младшим основанием, а сама система называется
 * Q-P-ичной.
 * - во избежании разночтения для изображения каждой P-ичной цифры отводится одинаковое количество
 * Q-ичных разрядов, достаточное для представления любой P-ичной цифры.
 * - если P = Q^i (где i – целое положительное число), запись любого числа в смешанной системе
 * счисления тождественно совпадает с изображением этого числа в системе счисления с основанием Q:
 *      + примерами такой смешанной системы счисления являются 2ично-8-ричная и 2-ично-16-ричная:
 *      + A2 (в 16-ричной) = 1010 0010 (в 2-ичной) = 1010 0010 (в 2-ично-16-ричной)*/


/*2-ИЧНО-10-ТИЧНАЯ
 * - это пример смешанной системы счисления
 * - для изображения каждой 10-тичной цифры отводится 4 2-ичных разряда, поскольку максимальная
 * 10-тичная цифра 9 кодируется как 1001 (в 2-ичной).
 * - напр, 925 (в 10-тичной) = 1001 0010 0101 (в 2-ично-10-тичной)*/

public class Systems {

    public static void main(String[] args) {
        /*ПОСМОТРЕТЬ ПРЕДСТАВЛЕНИЕ ЧИСЛА*/

        /*В 2-ИЧНОМ КОДЕ*/
        System.out.println(Integer.toBinaryString(666)); // для byte, short, char и int
        System.out.println(Long.toBinaryString(666)); // для long
        System.out.println(Long.toBinaryString(Float.floatToIntBits(666f))); // для float
        System.out.println(Long.toBinaryString(Double.doubleToLongBits(666))); // для double

        /*В 8-РИЧНОМ КОДЕ*/
        System.out.println(Integer.toOctalString(666)); // для byte, short, char и int
        System.out.println(Long.toOctalString(666)); // для long
        System.out.println(Long.toOctalString(Float.floatToIntBits(666f))); // для float
        System.out.println(Long.toOctalString(Double.doubleToLongBits(666))); // для double

        /*В 16-РИЧНОМ КОДЕ*/
        System.out.println(Integer.toHexString(666)); // для byte, short, char и int
        System.out.println(Long.toHexString(666)); // для long
        System.out.println(Long.toHexString(Float.floatToIntBits(666f))); // для float
        System.out.println(Long.toHexString(Double.doubleToLongBits(666))); // для double
    }
}