package _lang_comments_documenting;

/* Для создания HTML документации утилитой javadoc:
 * - обрабатывает исходный текст, выделяет помеченную документацию из комментариев и связывает с
 * именами соответствующих классов и методов
 *
 * - извлекает сведения о следующих компонентах программы:
 *   + Пакеты.
 *   + Классы и интерфейсы, объявленные как public.
 *   + Методы, объявленные как public или protected.
 *   + Поля, объявленные как public или protected.
 *
 * - первое предложение должно быть кратким описанием
 *
 * - комментарии размещаются непосредственно перед компонентом, который документируют
 *
 * - после комментария идет дескриптор (начинается с @): например, @author
 *
 * - должны помещаться с начала строки комментария (лидирующий символ * игнорируется)
 *
 * - ресурсы типа картинок находятся в папке doc-files, где лежит исходный файл. Ссылка на ресурс:
 * <img srcss”doc-files/uml.png" alt=”UML diagram”/>
 *
 * - доклет — приложение, позволяющее формировать документацию произвольного вида
 *
 * - УПРАВЛЯЮЩИЕ ПОСЛЕДОВАТЕЛЬНОСТИ НЕ ИГНОРИРУЮТСЯ В КОММЕНТАРИЯХ (ошибка компиляции!)*/


/* КЛАССЫ
 * - Комментарий к классу должен быть после оператора import перед объявлением класса*/

/**
 * Класс, демонстрирующий применение документирующих комментариев.
 *
 * @author Illya Galukhin
 * @version 1.0
 */
public class Main {


    /* МЕТОДЫ
    - Комментарии к методам должны быть перед методом*/

    /**
     * Этот метод возвращает квадрат значения параметра num.
     *
     * @param num Значение, которое требуется возвести в квадрат.
     * @return Квадрат числового значения параметра num.
     * @throws ArithmeticException Исключение при делении на 0 {@code int num = 32/ 0}.
     * @see ArithmeticException (просто ссылка на класс ArithmeticException)
     */
    public double square(double num) throws ArithmeticException {
        return num * num;
    }

    public static void main(String[] args) {
        Main m = new Main();
        m.square(33);
    }
}
