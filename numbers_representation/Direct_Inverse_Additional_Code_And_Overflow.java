package numbers_representation;

/* Число со знаком в вычислительной технике представляется путем представления старшего разряда
 * числа в качестве знакового:
 *      - 0 означает знак «плюс» для данного числа,
 *      - 1 - знак «минус»*/


/*ПРЯМОЙ КОД
 * - это одинаковое представление значимой части числа для положительных и отрицательных
 * - отличается только старший разряд (1 для - и 0 для +)
 * - напр. 0_000_0001 это +1, а 1_000_0001 это -1
 * - число 0 также имеет 2 представления:
 *      + +0 это 0_000_0000
 *      + -0 это 1_000_0000*/


/* ОБРАТНЫЙ КОД
 * - для положительных тот же вид, что и прямой код
 * - для отрицательных - инвертирование всех значащих разрядов прямого кода (знаки 0 в 1, а 1 в 0)
 * - напр. 0_000_0001 это +1, а 1_111_1110 это -1
 * - число 0 также имеет 2 представления:
 *      + +0 так и осталось 0_000_0000
 *      и -0 стало 1_111_1111*/


/* ПРОБЛЕМЫ АРИФМЕТИЧЕСКИХ ОПЕРАЦИЙ С ОТРИЦАТЕЛЬНЫМИ ЗНАЧЕНИЯМИ
 * Чтобы можно было выполнять арифметические операции над числами с разными знаками, пришлось бы
 * (напр. 23 и -123):
 *      - сначала определять большее по модулю число (123)
 *      - произвести вычитание (123 - 23)
 *      - присвоить результату знак большего по модулю числа (-100)
 *
 * - Дополнительный код позволяет выполнить операцию алгебраического суммирования и вычитания на
 * обычном сумматоре (при этом не требуется определения модуля и знака числа):
 *      + поскольку A - B = A + (-B)
 *      + тогда нужно узнать отрицательное значение для B
 *      + при этом мы знаем, что (-B) + B = 0 (который 1_0000_0000) */


/*ДОПОЛНИТЕЛЬНЫЙ КОД
 * - для положительных тот же вид, что и прямой код
 * - для отрицательных - прибавление 1 к обратному коду
 * - напр. 0_000_0001 это +1, а -1 это прибавление к обратному (1_111_1110) 1 = 1_111_1111
 * - добавление 1 к обратному коду числа 0 дает единое представление числа 0 в дополнительном коде:
 *      + инверсия 0 это 1_111_1111 и прибавить 1 = 0_000_0000 (единица обрезалась)
 * - но это приводит к асимметрии диапазонов представления чисел относительно нуля:
 *      - в восьмиразрядном представлении диапазон изменения чисел с учетом знака: -128 <= x <= 127*/


/*СЛОЖЕНИЕ И ВЫЧИТАНИЕ ЧИСЕЛ СО ЗНАКАМИ В ДОПОЛНИТЕЛЬНОМ КОДЕ
 * - теперь если оба числа имеют одиновое количество разрядов, то их сумма будет получена по правилам
 * двоичного сложения (включая знаковый разряд):
 *       + напр. -12 и 23:
 *       1_111_0100 +
 *       0_001_0111 =
 *       ----------
 *       0_000_1011
 *
 * - ПЕРЕПОЛНЕНИЕ:
 *       + не произойдет, если числа имеют разные знаки
 *       + произойдет в случае переноса из старшего разряда!!!
 *       0_111_1111 (127) +
 *       0_111_1111 (127) =
 *       ----------
 *       1_111_1110 (-2)*/

public class Direct_Inverse_Additional_Code_And_Overflow {
}
