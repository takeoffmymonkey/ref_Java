package algorithms_datastructures.algorithms.sort;

/*сложность: n^2
 * - проход с первого элемента по массиву. каждый новый элемент сравнивается
 * с последним, и если он больше, то остается после последнего элемента, а если
 * меньше, то меняется местами с последним и сравнивается с предпоследним. и так,
 * пока он не окажется больше сравниваемого элемента - там и остается
 *
 * - как доставание новой карты из колоды и добавление ее к своим картам,
 * сортируя их по старшинству
 *
 * - относительно хорош для малых листов
 * - относительно хорош для частично сортированных листов
 *
 * - чтобы сократить время на то, чтоб подвинуть все элементы, можно использовать вместо массива
 * линкд лист
 *
 * */

import java.util.Arrays;

public class InsertionSort {
    public static void main(String[] args) {
        int[] a = {1, 4, 6, 2, 10, 3};
        sort(a);
        System.out.println("InsertionSort" + Arrays.toString(a));
    }

    private static void sort(int[] a) {
        // участвует каждый элемент
        for (int i = 0; i < a.length; i++) {
            int current = a[i]; // текущий открываемый
            int j = i - 1; // позиция, куда
            while (j >= 0 && a[j] > current) { // сдвиг позиции
                a[j + 1] = a[j];
                j = j - 1;
            }
            a[j + 1] = current; // текущий помещается
        }
    }
}
