package algorithms_datastructures.algorithms.sort;

/* ShellSort
 * - ключевая идея:
 *      - перед тем, как произвести обычный Insertion Sort (сравнивать рядом стоящие элементы),
 *      можно произвести несколько циклов сравнения элементов на определенной дистанции, уменьшая
 *      дистанцию для каждого цикла в 2 раза
 *      - в результате должно быть меньше обменов местами элементов
 *
 * - алгоритм:
 *      - для каждого прохода устанавливается дистанция (d) между 2 сравниваемыми элементами
 *          - изначальная d = длина массива/2 (без остатка)
 *      - первый проход по элементам:
 *          - сравнивается [i] элемент с [i + d] элементом и меняются местами, если нужно
 *          - сравнивается [i + 1] элемент с [i + 1 + d] элементом и меняются местами, если нужно
 *          - ... и т.д. пока элемент, с которым сравнивается не дойдет до конца массива
 *      - для следующего прохода d = предыдущая d/2 (без остатка)
 *      - когда d = 1, выполняется обычная Insertion Sort
 *
 * - сложность:
 *      - лучшая: O(n log(n))
 *      - средняя: O(n(n log(n))^2)
 *      - худшая: O(n(n log(n))^2) */

public class ShellSort {
}
