package algorithms_datastructures.datastructures;

/* Не путать с памятью в жаве
 * - является binary tree, которое:
 *      - complete, т.е. все уровни полностью заполнены
 *          - поэтому они сбалансированы
 *          - т.е. переход на новый уровень, когда заполнится текущий, и добавка к самому левому
 *          элементу
 *      - каждый ключ (значение) нода больше или равен ключам его детей
 *
 * - когда удаляется корень, то на его место становится последний, чтобы обеспечить комплитность, а
 * потом этот последний опускается по уровням на свое место, меняясь местами с тем, с которым
 * сравнивается. сложность здесь логарифмическая
 *
 * - вставка: добавляется в конец, а потом соответсвенно поднимается, сравниваясь с родителем (т.н.
 * починка хипа). сложность логарифмическая
 *
 * - т.к. самый больщой элемент всегда сверху, то эту структуру можно использовать как приорити кью
 *
 * - смена значения элемента просто требует починки хипа, поэтому сложность логарифмическая
 *
 * -учитывая, что у элементов есть некоторый порядок, то приорити кью можно имплементировать с
 * помощью массива! Т.е. 0 элемент - корень и т.д.
 * */

public class BinaryHeap {
}
