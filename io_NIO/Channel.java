package io_NIO;

/*КАНАЛЫ: разные типы, которые представляют подключения к сущностям, способным производить io
 * операции
 *      - например, устройство, сетевой сокет, файл, программный компонент
 *      - каналы могут быть открытыми или закрытыми
 *      - являются асинхронно закрываемыми и прерываемыми
 *      - иерархия:
 *          - Channel: связующее звено для io операций
 *              - ReadableByteChannel: может передавать в буфер
 *                  - ScatteringByteChannel: может передавать в последовательность буферов
 *              - WritableByteChannel: может писать из буфера
 *                  - GatheringByteChannel: может писать из последовательности буферов
 *              - ByteChannel: может передавать/писать из буфера
 *                  - SeekableByteChannel: ByteChannel, подключенный к сущности, у которой
 *                  последовательность байтов переменной длины
 *                      - методы для запроса и изменений текущей позиции канала и его размера
 *              - AsynchronousChannel: поддерживает асинхронные операции io
 *                  - AsynchronousByteChannel: может передавать/писать из буфера асинхронно
 *              - NetworkChannel: канал к сетевому сокету,
 *                  - MulticastChannel: может соединять Internet Protocol (IP) multicast groups
 *              - Channels: утилитные методы для взаимодействия каналов с потоками
 *      - файловые каналы:
 *          - FileChannel: читает, записывает, мапит и манипулирует файлами
 *              - создается от статического метода open или вызовом getChannel у FileInputStream,
 *              FileOutputStream или RandomAccessFile
 *          - FileLock: блокировка (куска) файла
 *          - MappedByteBuffer: прямой байтовый буфер, замапенный на кусок файла*/


/* * - чтобы записать в цель:
 *      - нужно записать данные в буфер
 *      - затем передать его в канал
 *      - после этого данные будут из буфера записаны в цель
 *
 * - чтобы прочитать из источника:
 *      - нужно передать буфер в канал
 *      - канал считывает данные в буфер
 *      - затем я считывают данные из буфера
 *
 * - т.е. ключевыми действиями являются запись и чтение данных из буфера*/


/* *      - каналы - трубопроводы, которые передают данные между буферами и сущностями на другом конце
 *          - данные помещаются в буфер, а буфер передается в канал
 *          - или данные забираются в буфер из канала
 *          - позволяют использовать нативные сервисы ОС без оверхеда
 *          - могут работать в блокирующем и неблокирующем режимах: только для
 *          stream-ориентированных потоков, напр. сокетов
 *          - FileChannel: RW канал
 *              - всегда блокирующий
 *              - не могут создаваться напрямую, а через getChannel() на файловом объекте типа
 *              RandomAccessFile, FileInputStream, или FileOutputStream
 *              - потокобезопасен*/


public class Channel {
}
